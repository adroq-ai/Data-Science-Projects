# -*- coding: utf-8 -*-
"""Gold Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/157bNKBhaWBMV-7DpssSlyxMBiwv5CZL-

# **Gold Price Data**

## **About Dataset**

Data Overview: This data file is a Comma separated value file format with 2290 rows and 7 columns. It contains 5 columns which are numerical in datatype and one column in Date format. Clearly the data shows value of the variables **SPX,GLD,USO,SLV,EUR/USD** against the dates in the date column.

#**Import the Libraries**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn import metrics

"""#**Data Collecction and Preprocessing**"""

# Loading the dataset into a pandas DataFrame
gold_data = pd.read_csv('gld_price_data.csv')  # Use this to identify issues

# Display the first few rows
print("First 5 rows of the dataset:")
gold_data.head()

# Display the last few rows
print("Last 5 rows of the dataset:")
gold_data.tail()

# Checking the shape of the dataset
gold_data.shape    # Outputs the number of rows and columns in the dataset.

# Statistical description of the dataset
print("\nStatistical Description of the Dataset:")
gold_data.describe()

# Check for missing values
missing_values = gold_data.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

# Geerating some Information about the dataset
gold_data.info()

"""**Correlation**"""

# Drop or Exclude Non-Numeric Columns
numeric_data = gold_data.select_dtypes(include=['float64', 'int64'])

# Checking the correlation of the dataset
corr = numeric_data.corr()
print(corr)

# Create the heatmap with enhancements
plt.figure(figsize=(10, 8))
sns.heatmap(
    corr,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    cbar_kws={"shrink": 0.8},
    linewidths=0.5,
    square=True,
    annot_kws={"size": 8, "weight": "bold"},
)
plt.title("Enhanced Correlation Heatmap", fontsize=14, fontweight="bold", pad=15)
plt.xticks(fontsize=10, rotation=45, ha="right", weight="bold")
plt.yticks(fontsize=10, weight="bold")
plt.tight_layout()

# Correlations value of GLD
corr_value = corr["GLD"].sort_values(ascending=False)
corr_value

# Checking the distribution of GLD price
sns.distplot(gold_data['GLD'],color='green')

"""# Splitting features and target"""

# Splitting features and target
X = gold_data.drop(['Date','GLD'],axis=1)
y = gold_data['GLD']

print("Features (X):")
print(X.head())
print("\nTarget (y):")
print(y.head())

"""# **Splitting the dataset into Training and Test sets**"""

# Splitting the dataset into Training and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=3)
print("\nDataset split completed:")
print(f"Total samples: {X.shape[0]}, Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

# checking the number of Test and Train dataset
print(X.shape, X_train.shape, X_test.shape)

"""# **Model Training**"""

# Initialize the model
randforR_model = RandomForestRegressor(n_estimators=100, random_state=3)

# Training the RandomForestRegressor model with train data
randforR_model.fit(X_train, y_train)

"""#**Model Evaluation**"""

# Evaluate on Training Data
training_data_prediction = randforR_model.predict(X_train)
r2_train = metrics.r2_score(y_train, training_data_prediction)
mae_train = metrics.mean_absolute_error(y_train, training_data_prediction)
print(f"\nTraining Data Evaluation:\nR-squared Error: {r2_train:.4f}\nMean Absolute Error: {mae_train:.4f}")

# Evaluate on Test Data
test_data_prediction = randforR_model.predict(X_test)
r2_test = metrics.r2_score(y_test, test_data_prediction)
mae_test = metrics.mean_absolute_error(y_test, test_data_prediction)
print(f"\nTest Data Evaluation:\nR-squared Error: {r2_test:.4f}\nMean Absolute Error: {mae_test:.4f}")

# Scatter Plot for Train Data
plt.scatter(y_train, training_data_prediction, alpha=0.5, color='blue')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Train Data: Actual Prices vs Predicted Prices")

# Add Ideal Prediction Line
max_val = max(max(y_train), max(training_data_prediction))
min_val = min(min(y_train), min(training_data_prediction))
plt.plot([min_val, max_val], [min_val, max_val], color='red', label='Ideal Prediction')
plt.legend()
plt.show()

# Scatter Plot for Test Data
plt.figure(figsize=(8, 6))
plt.scatter(y_test, test_data_prediction, alpha=0.5, color='green')
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Test Data: Actual Prices vs Predicted Prices")

# Add Ideal Prediction Line
max_val = max(max(y_test), max(test_data_prediction))
min_val = min(min(y_test), min(test_data_prediction))
plt.plot([min_val, max_val], [min_val, max_val], color='red', label='Ideal Prediction')
plt.legend()
plt.show()

"""# Compare the Actual Values and Predicted Values with Plot"""

#  Convert y_test to a list
y_test_list = list(y_test)

# Convert test_data_prediction to a list
test_data_prediction_list = list(test_data_prediction)

plt.figure(figsize=(10, 6))
plt.plot(y_test_list, label='Actual Prices', color='blue')
plt.plot(test_data_prediction_list, label='Predicted Prices', color='red')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.title('Actual Prices vs Predicted Prices')
plt.legend()
plt.show()

plt.figure(figsize=(10, 6))
plt.plot(test_data_prediction_list, label='Predicted Prices', color='red')
plt.xlabel('Number of values')
plt.ylabel('GLD Price')
plt.title('Actual Prices')
plt.legend()
plt.show()