# -*- coding: utf-8 -*-
"""Medical Insurance Cost Prediction using Linear Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r68xxDvgYgrssPYGQ9o1srSCp40ClCfP

#**Medical Cost Personal Datasets**

**Insurance Forecast by using Linear Regression**

##**About Dataset**

### **Context**

Machine Learning with R by Brett Lantz is a book that provides an introduction to machine learning using R. As far as I can tell, Packt Publishing does not make its datasets available online unless you buy the book and create a user account which can be a problem if you are checking the book out from the library or borrowing the book from a friend. All of these datasets are in the public domain but simply needed some cleaning up and recoding to match the format in the book.

###**Content**

####**Columns**

1. **age:** age of primary beneficiary

2. **sex:** insurance contractor gender, female, male

3. **bmi**: Body mass index, providing an understanding of body, weights that are relatively high or low relative to height,
objective index of body weight (kg / m ^ 2) using the ratio of height to weight, ideally 18.5 to 24.9

4. **children:** Number of children covered by health insurance / Number of dependents

5. **smoker:** Smoking

6. **region:** the beneficiary's residential area in the US, northeast, southeast, southwest, northwest.

7. **charges:** Individual medical costs billed by health insurance

## **Acknowledgements**

The dataset is available on GitHub here.

## **Inspiration**
Can you accurately predict insurance costs?

#**Import the Libraries**
"""

## import some basic libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""#**Data Collecction and Preprocessing**"""

# Loading the dataset into a pandas DataFrame
insurance_data = pd.read_csv('insurance.csv')  # Use this to identify issues

# Display the first few rows
print("First 5 rows of the dataset:")
insurance_data.head()

# Checking the shape of the dataset
insurance_data.shape    # Outputs the number of rows and columns in the dataset.

# Statistical description of the dataset
print("\nStatistical Description of the Dataset:")
insurance_data.describe()

# Check for missing values
missing_values = insurance_data.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

# Geerating some Information about the dataset
insurance_data.info()

# Checking the distribution of data
print("\nDistribution of Data:")
print(insurance_data.value_counts())

"""**Categorical Features**


*   Sex
*   Smoker
*   Region


"""

# Checking the distribution of categorical data
print("\nDistribution of Categorical Data:")
print(insurance_data['sex'].value_counts())
print(insurance_data['smoker'].value_counts())
print(insurance_data['region'].value_counts())

# Distribution graph of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_data["age"])
plt.title("Age Distribution")
plt.show()

# Distribution graph of Sex Column
plt.figure(figsize=(6,6))
sns.countplot(x='sex', data=insurance_data)
plt.title("Sex Distribution")
plt.show()

"""Normal BMI Range ----> 18.5 to 24.9

BMI ---> Body Mass Index

"""

# Distribution graph of BMI value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_data["bmi"])
plt.title("BMI Distribution")
plt.show()

# Distribution graph of Children column
plt.figure(figsize=(6,6))
sns.distplot(insurance_data["children"])
plt.title("Children Distribution")
plt.show()

# Distribution graph of Children column
plt.figure(figsize=(6,6))
sns.countplot(x='children', data=insurance_data)
plt.title("Children Distribution")
plt.show()

# Checking the distribution of Children column
print("\nDistribution of Children Data:")
print(insurance_data['children'].value_counts())

# Distribution graph of Smoker column
plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=insurance_data)
plt.title("Smoker Distribution")
plt.show()

# Checking the distribution of Smoker column
print("\nDistribution of Smoker Data:")
print(insurance_data['smoker'].value_counts())

# Distribution graph of Region column
plt.figure(figsize=(6,6))
sns.countplot(x='region', data=insurance_data)
plt.title("Region Distribution")
plt.show()

# Checking the distribution of Region column
print("\nDistribution of Region Data:")
print(insurance_data['region'].value_counts())

# Distribution graph of Charges column
plt.figure(figsize=(6,6))
sns.distplot(insurance_data["charges"])
plt.title("Charges Distribution")
plt.show()

"""**Encoding the Categorical Features**"""

# Encoding the sex column
insurance_data.replace({'sex':{'male':0,'female':1}}, inplace=True)

# Encoding the smoker column
insurance_data.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

# Encoding the region column
insurance_data.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

# Display the first few rows with the implementation encoding features
print("First 5 rows of the dataset:")
insurance_data.head()

"""**Splitting features and target**"""

# Splitting features and target
X = insurance_data.drop(columns='charges', axis=1)
y = insurance_data['charges']

print("Features (X):")
print(X.head())
print("\nTarget (y):")
print(y.head())

"""# **Splitting the dataset into Training and Test sets**"""

# Splitting the dataset into Training and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, random_state=1)
print("\nDataset split completed:")
print(f"Total samples: {X.shape[0]}, Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

# checking the number of Test and Train dataset
print(X.shape, X_train.shape, X_test.shape)

"""# **Model Training**

"""

# Initialize the model
ling_model = LinearRegression()

# Training the Linear Regression model with train data
ling_model.fit(X_train, y_train)

"""#**Model Evaluation**"""

# Evaluate on Training Data
training_data_prediction = ling_model.predict(X_train)
r2_train = metrics.r2_score(y_train, training_data_prediction)
mae_train = metrics.mean_absolute_error(y_train, training_data_prediction)
print(f"\nTraining Data Evaluation:\nR-squared Error: {r2_train:.4f}\nMean Absolute Error: {mae_train:.4f}")

# Evaluate on Test Data
test_data_prediction = ling_model.predict(X_test)
r2_test = metrics.r2_score(y_test, test_data_prediction)
mae_test = metrics.mean_absolute_error(y_test, test_data_prediction)
print(f"\nTest Data Evaluation:\nR-squared Error: {r2_test:.4f}\nMean Absolute Error: {mae_test:.4f}")

"""# **Making a Predictive System**"""

# Sample input data (new instance to classify)
input_data = [31,1,25.74,0,1,0]

# Converting input data to a NumPy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshaping the input array for prediction (to match model's expected input shape)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Making a prediction
prediction = ling_model.predict(input_data_reshaped)
print(prediction)

print('The insurance cost is USD', prediction[0])