# -*- coding: utf-8 -*-
"""Loan Status Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LfgfrpOyBaRlrrjr05tKsNQA3KMFrYL9

#**Loan Predication**

**About Dataset**

Among all industries, insurance domain has the largest use of analytics & data science methods. This data set would provide you enough taste of working on data sets from insurance companies, what challenges are faced, what strategies are used, which variables influence the outcome etc. This is a classification problem. **The data has 615 rows and 13 columns.**


**Problem**
-----
Company wants to automate the loan eligibility process (real time) based on customer detail provided while filling online application form. These details are **Gender, Marital Status, Education, Number of Dependents, Income, Loan Amount, Credit History and other**s. To automate this process, they have given a problem to identify the customers segments, those are eligible for loan amount so that they can specifically target these customers. Here they have provided a partial data set.

# **Installing require Tools**
"""

pip install gradio

"""#**Import the Libraries**"""

## import some basic libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import gradio as gr

"""#**Importing the dataset from Kaggle**"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("ninzaami/loan-predication")

print("Path to dataset files:", path)

import os
os.listdir("/root/.cache/kagglehub/datasets/ninzaami/loan-predication/versions/1")

"""**Downloading the dataset to your local machine**"""

from google.colab import files
files.download('/root/.cache/kagglehub/datasets/ninzaami/loan-predication/versions/1/train_u6lujuX_CVtuZ9i (1).csv')

"""#**Data Collecction and Preprocessing**



**Loading the dataset into your Python environment**
"""

# Load the dataset into a pandas DataFrame
file_path = "/root/.cache/kagglehub/datasets/ninzaami/loan-predication/versions/1/train_u6lujuX_CVtuZ9i (1).csv"
data = pd.read_csv(file_path)

# Check the first few rows of the dataset
print(data.head())

data.head()

"""**OR**

**using this method**

**Rename "train_u6lujuX_CVtuZ9i (1).csv" to "loan.csv"**
"""

# Loading the dataset into a pandas DataFrame
loan_data = pd.read_csv('loan.csv')  # Use this to identify issues

# Display the first few rows
print("First 5 rows of the dataset:")
loan_data.head()

# Checking the shape of the dataset
loan_data.shape    # Outputs the number of rows and columns in the dataset.

# Statistical description of the dataset
print("\nStatistical Description of the Dataset:")
loan_data.describe()

# Check for missing values
missing_values = loan_data.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

# Dropping the missing values
loan_data = loan_data.dropna()

"""**Label Encoding**

Replacing my ***Loan_Status*** Column by numerical value

**N : 0**


**Y : 1**
"""

# Label Encoding
loan_data.replace({"Loan_Status":{'N':0,'Y':1}},inplace=True)

# Display the first few rows
print("First 5 rows of the dataset:")
loan_data.head()

# Checking Dependent column values
loan_data['Dependents'].value_counts()

# Replace 3+ with 4
loan_data = loan_data.replace(to_replace='3+', value=4)

# Dependent Values
loan_data['Dependents'].value_counts()

"""#**Data Visualization**"""

# Education Vs Loan Status
sns.countplot(x='Education',hue='Loan_Status',data=loan_data)

# Marital Status Vs Loan Status
sns.countplot(x='Married',hue='Loan_Status',data=loan_data)

# Gender Vs Loan Status
sns.countplot(x='Gender',hue='Loan_Status',data=loan_data)

# Self_Employed Vs Loan Status
sns.countplot(x='Self_Employed',hue='Loan_Status',data=loan_data)

# Property_Area Vs Loan Status
sns.countplot(x='Property_Area',hue='Loan_Status',data=loan_data)

# Convert categorical columns to numerical column
loan_data.replace({'Married':{'No':0,'Yes':1},
                   'Gender':{'Male':1,'Female':0},
                   'Self_Employed':{'No':0,'Yes':1},
                   'Property_Area':{'Rural':0,'Semiurban':1,'Urban':2},
                   'Education':{'Graduate':1,'Not Graduate':0}},inplace=True)

# Display the first few rows
print("First 5 rows of the dataset:")
loan_data.head()

# Splitting features and target
X = loan_data.drop(columns=['Loan_ID','Loan_Status'],axis=1)
y = loan_data['Loan_Status']

print(X)

print(y)

"""# **Splitting the Dataset into Training and Test Sets**"""

# Splitting the dataset into Training set and Test Set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, stratify = y, random_state = 1)

# checking the number of Test and Train dataset
print(X.shape, X_train.shape, X_test.shape)

"""# **Model Training --> Support Vector Machine**"""

classifier = svm.SVC(kernel='linear')

# Training the SVM model with train data
classifier.fit(X_train, y_train)

"""# **Model Evaluation**"""

# Calculate accuracy on the training data
X_train_pred = classifier.predict(X_train)
train_data_accuracy = accuracy_score(X_train_pred, y_train)
print('Accuracy on training data : ', train_data_accuracy)

# Generate and display the confusion matrix on the training data
# The confusion matrix shows the counts of True Positives, True Negatives, False Positives, and False Negatives
conf_matrix = confusion_matrix(y_train, X_train_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Generate and display the classification report
# The classification report includes precision, recall, F1-score, and support for each class
class_report = classification_report(y_train, X_train_pred, target_names=["No (0)", "Yes (1)"])
print("\nClassification Report:")
print(class_report)

# accuracy on the test data
X_test_pred = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_pred, y_test)
print('Accuracy on test data : ', test_data_accuracy)

# Generate and display the confusion matrix on the test data
# The confusion matrix shows the counts of True Positives, True Negatives, False Positives, and False Negatives
conf_matrix = confusion_matrix(y_test, X_test_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Generate and display the classification report
# The classification report includes precision, recall, F1-score, and support for each class
class_report = classification_report(y_test, X_test_pred, target_names=["No (0)", "Yes (1)"])
print("\nClassification Report:")
print(class_report)

"""# **Making a Predictive System**"""

def predict_loan_status(input_data):
    """
    Predicts loan status based on input data using the trained SVM model.

    Parameters:
        input_data (list): A list of values corresponding to the features in the order:
                           [Gender, Married, Dependents, Education, Self_Employed,
                            ApplicantIncome, CoapplicantIncome, LoanAmount,
                            Loan_Amount_Term, Credit_History, Property_Area]

    Returns:
        str: Prediction result (Loan Approved or Not Approved).
    """
    # Convert input_data to a NumPy array
    input_array = np.array(input_data).reshape(1, -1)

    # Ensure the model and scaler (if used) are applied to the input
    prediction = classifier.predict(input_array)

    # Interpret and return the result
    if prediction[0] == 1:
        return "Loan Approved"
    else:
        return "Loan Not Approved"

# Example: Predict for a new customer
# Sample data: [Gender (1 for Male), Married (1 for Yes), Dependents (0), Education (1 for Graduate),
# Self_Employed (0 for No), ApplicantIncome, CoapplicantIncome, LoanAmount, Loan_Amount_Term,
# Credit_History, Property_Area (0 for Rural, 1 for Semiurban, 2 for Urban)]
sample_data = [1, 1, 0, 1, 0, 5000, 2000, 150, 360, 1, 2]

# Call the function to predict
result = predict_loan_status(sample_data)
print("Prediction Result:", result)

# Define the Gradio interface
def gradio_predict(gender, married, dependents, education, self_employed,
                   applicant_income, coapplicant_income, loan_amount,
                   loan_term, credit_history, property_area):
    # Convert inputs to a list
    input_data = [
        int(gender), int(married), int(dependents), int(education), int(self_employed),
        float(applicant_income), float(coapplicant_income), float(loan_amount),
        float(loan_term), int(credit_history), int(property_area)
    ]
    # Call the prediction function
    return predict_loan_status(input_data)


# Set up the Gradio interface
interface = gr.Interface(
    fn=gradio_predict,
    inputs=[
        gr.Radio(["0", "1"], label="Gender (0 = Female, 1 = Male)"),
        gr.Radio(["0", "1"], label="Married (0 = No, 1 = Yes)"),
        gr.Dropdown(["0", "1", "2", "3+"], label="Dependents"),
        gr.Radio(["0", "1"], label="Education (0 = Not Graduate, 1 = Graduate)"),
        gr.Radio(["0", "1"], label="Self Employed (0 = No, 1 = Yes)"),
        gr.Number(label="Applicant Income"),
        gr.Number(label="Coapplicant Income"),
        gr.Number(label="Loan Amount"),
        gr.Number(label="Loan Amount Term"),
        gr.Radio(["0", "1"], label="Credit History (0 = No, 1 = Yes)"),
        gr.Radio(["0", "1", "2"], label="Property Area (0 = Rural, 1 = Semiurban, 2 = Urban)")
    ],
    outputs=gr.Textbox(label="Prediction Result"),
    title="Loan Approval Prediction",
    description="Enter the required details to predict if a loan will be approved."
)

# Launch the interface
interface.launch()