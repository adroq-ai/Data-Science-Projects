# -*- coding: utf-8 -*-
"""Spam Mail Prediction using LogisticRegression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ojKrni0cZmsIUMN1Vs1Q29erBW346D97

#**Installing require Tools**
"""

pip install gradio

"""#**Import the Libraries**"""

## import some basic libraries
import numpy as np
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import gradio as gr

"""#**Data Collection and Preprocessing**"""

# Loading the dataset into a pandas DataFrame
raw_mail_dataset = pd.read_csv('mail_data.csv')  # Use this to identify issues

# Display the  rows
print("Rows of the dataset:")
raw_mail_dataset

# Checking the shape of the dataset
raw_mail_dataset.shape    # Outputs the number of rows and columns in the dataset.

# Replace the null values with a null string
mail_dataset = raw_mail_dataset.where((pd.notnull(raw_mail_dataset)), '')

# Display the first few rows
print("First 5 rows of the dataset:")
raw_mail_dataset.head()

# Check for missing values
missing_values = raw_mail_dataset.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

"""**Encoding the Categorical column**

* **Span mail --->  0**
* **Ham mail  --->  1**

"""

# Converting the text data into numerical values
mail_dataset.loc[mail_dataset['Category'] == 'spam', 'Category'] = 0
mail_dataset.loc[mail_dataset['Category'] == 'ham', 'Category'] = 1

"""**Splitting the dataset into Text & Target**"""

# Splitting the dataset into Text & Target
X = mail_dataset['Message']
y = mail_dataset['Category']

print("Text (X):")
print(X.head())
print("\nTarget (y):")
print(y.head())

"""# **Splitting the dataset into Training and Test sets**"""

# Splitting the dataset into Training and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=3)
print("\nDataset split completed:")
print(f"Total samples: {X.shape[0]}, Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

# checking the number of Test and Train dataset
print(X.shape, X_train.shape, X_test.shape)

"""**Feature Extraction**"""

# Initialize TfidfVectorizer and transform the text data to features vector that can be used as input to the Logistic Regression
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)

# Fit on training data and transform training data
X_train_features = feature_extraction.fit_transform(X_train)

# Transform the test data using the training data's parameters
X_test_features = feature_extraction.transform(X_test)

# Convert y_train and y_test to integers
y_train = y_train.astype('int')
y_test = y_test.astype('int')

print(f"Training features:\n {X_train_features}")

print("Feature extraction completed:")
print(f"Training features shape: {X_train_features.shape}, Test features shape: {X_test_features.shape}")

"""# **Model Training**"""

# Initialize the model
logReg_model = LogisticRegression()

# Training the LogisticRegression model with train data
logReg_model.fit(X_train_features, y_train)

"""#**Model Evaluation**"""

# Calculate accuracy on the training data
X_train_pred = logReg_model.predict(X_train_features)
train_data_accuracy = accuracy_score(X_train_pred, y_train)
print('Accuracy on training data : ', train_data_accuracy)

# Generate and display the confusion matrix on the training data
# The confusion matrix shows the counts of True Positives, True Negatives, False Positives, and False Negatives
conf_matrix = confusion_matrix(y_train, X_train_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Generate and display the classification report
# The classification report includes precision, recall, F1-score, and support for each class
class_report = classification_report(y_train, X_train_pred, target_names=["Spam Mail (0)", "Ham Mail (1)"])
print("\nClassification Report:")
print(class_report)

# accuracy on the test data
X_test_pred = logReg_model.predict(X_test_features)
test_data_accuracy = accuracy_score(X_test_pred, y_test)
print('Accuracy on test data : ', test_data_accuracy)

# Generate and display the confusion matrix on the test data
# The confusion matrix shows the counts of True Positives, True Negatives, False Positives, and False Negatives
conf_matrix = confusion_matrix(y_test, X_test_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Generate and display the classification report
# The classification report includes precision, recall, F1-score, and support for each class
class_report = classification_report(y_test, X_test_pred, target_names=["Spam Mail (0)", "Ham Mail (1)"])
print("\nClassification Report:")
print(class_report)

"""# **Making a Predictive System**"""

# Sample input data (new instance to classify)
input_mail = ["Even my brother is not like to speak with me. They treat me like aids patent."]

# Converting text to a feature vectors
input_data_features = feature_extraction.transform(input_mail)



# Making a prediction
prediction = logReg_model.predict(input_data_features)
print(prediction)

# Outputting the result
if prediction[0] == 0:
    print("The Mail is Fake  (i.e. Spam Mail)")
else:
    print("The Mail is Real  (i.e. Ham Mail)")

# Sample input data (new instance to classify)
input_mail = ["Congratulations! You've won a free ticket."]

# Converting text to a feature vector
input_data_features = feature_extraction.transform(input_mail)

# Making a prediction
prediction = logReg_model.predict(input_data_features)
print(prediction)

# Outputting the result
if prediction[0] == 0:
    print("The Mail is Fake  (i.e. Spam Mail)")
else:
    print("The Mail is Real  (i.e. Ham Mail)")

# Sample input data (new instance to classify)
input_mail = ["18 days to Euro2004 kickoff! U will be kept informed of all the latest news and results daily. Unsubscribe send GET EURO STOP to 83222."]

# Converting text to a feature vector
input_data_features = feature_extraction.transform(input_mail)

# Making a prediction
prediction = logReg_model.predict(input_data_features)
print(prediction)

# Outputting the result
if prediction[0] == 0:
    print("The Mail is Fake  (i.e. Spam Mail)")
else:
    print("The Mail is Real  (i.e. Ham Mail)")

# Ensure the feature extractor and model are loaded
def predict_spam_mail(input_mail):
    """
    Predicts whether an email is spam or ham using a trained Logistic Regression model.

    Parameters:
        input_mail (list): A list containing a single email message.

    Returns:
        str: Prediction result ("Spam" or "Ham").
    """

    # Ensure input is a non-empty list
    if not input_mail or input_mail[0].strip() == "":
        return "Error: Please enter a valid message."

    # Convert the input into a feature vector using the trained TfidfVectorizer
    input_data_features = feature_extraction.transform(input_mail)

    # Make the prediction using the trained Logistic Regression model
    prediction = logReg_model.predict(input_data_features)

    # Interpret and return the result
    if prediction[0] == 0:
        return "The Mail is Fake  (i.e. Spam Mail)"
    else:
        return "The Mail is Real  (i.e. Ham Mail)"

def gradio_predict(Message):
    """
    Takes user input from Gradio and predicts if the message is Spam or Ham.
    """
    # Convert input to a list (required format for TfidfVectorizer)
    input_mail = [str(Message)]

    # Call the prediction function
    return predict_spam_mail(input_mail)

# Set up the Gradio interface
interface = gr.Interface(
    fn=gradio_predict,
    inputs=gr.Textbox(lines=2, placeholder="Enter your message here...", label="Message"),
    outputs=gr.Textbox(label="Prediction Result"),
    title="Spam Mail Prediction",
    description="Enter the required Mail to predict if a message is Spam or Ham."
)

# Launch the interface
interface.launch()