# -*- coding: utf-8 -*-
"""Customer Segmentation using K-Means Clustering.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eVP6CktZuNMcFp9FYVWgCEJZtgjsSBVQ

#**Mall Customer Segmentation Data**

**Market Basket Analysis**

## **About Dataset**

### **Context**

This data set is created only for the learning purpose of the customer segmentation concepts , also known as market basket analysis . I will demonstrate this by using unsupervised ML technique (KMeans Clustering Algorithm) in the simplest form.

### **Content**

You are owing a supermarket mall and through membership cards , you have some basic data about your customers like Customer ID, age, gender, annual income and spending score.
Spending Score is something you assign to the customer based on your defined parameters like customer behavior and purchasing data.

### **Problem Statement**
You own the mall and want to understand the customers like who can be easily converge [Target Customers] so that the sense can be given to marketing team and plan the strategy accordingly.

## **Acknowledgements**
From Udemy's Machine Learning A-Z course.

I am new to Data science field and want to share my knowledge to others

https://github.com/SteffiPeTaffy/machineLearningAZ/blob/master/Machine%20Learning%20A-Z%20Template%20Folder/Part%204%20-%20Clustering/Section%2025%20-%20Hierarchical%20Clustering/Mall_Customers.csv

## **Inspiration**

By the end of this case study , you would be able to answer below questions.

1. How to achieve customer segmentation using machine learning algorithm (KMeans Clustering) in Python in simplest way.
2. Who are your target customers with whom you can start marketing strategy [easy to converse]
3. How the marketing strategy works in real world

#**Import the Libraries**
"""

## import some basic libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

"""#**Data Collection and Analysis**"""

# Loading the dataset into a pandas DataFrame
mall_customers_data = pd.read_csv('Mall_Customers.csv')  # Use this to identify issues

# Display the first few rows
print("First 5 rows of the dataset:")
mall_customers_data.head()

# Display the last few rows
print("Last 5 rows of the dataset:")
mall_customers_data.tail()

# Checking the shape of the dataset
mall_customers_data.shape    # Outputs the number of rows and columns in the dataset.

# Statistical description of the dataset
print("\nStatistical Description of the Dataset:")
mall_customers_data.describe()

# Check for missing values
missing_values = mall_customers_data.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

# Generating some Information about the dataset
mall_customers_data.info()

# Checking the distribution of data
print("\nDistribution of Data:")
print(mall_customers_data.value_counts())

"""**Selecting the Annual Income Columns & Spending Score Column**"""

# choosing the Annual Income columns & Spending Score column
X = mall_customers_data.iloc[:, [3, 4]].values

print(X)

"""**Choosing the number of clusters**

WCSS ---> Within Clusters Sum of Squares
"""

# Finding wcss value for different number of clusters
wcss = []

for i in range(1, 11): # Between 1 - 11 but (11 is not included) i.e 10
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plotting an elbow graph for the significant value
sns.set()
plt.plot(range(1, 11), wcss)
plt.title('The Elbow Point Graph')
plt.xlabel('Number of Clusters')
plt.ylabel('WCSS')
plt.show()

"""**Optimum Number of Clusters = 5**

#**Training the K-Means Clustering Model**
"""

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)

# Return a label  for each data point based on their cluster
y_kmeans = kmeans.fit_predict(X)

print(y_kmeans)

"""**5 Clusters ---.0, 1, 2, 3, 4, 5**

#**Visualizing all the clusters**
"""

# Plotting all the clusters and their centroids
plt.figure(figsize=(8, 6))
plt.scatter(X[y_kmeans == 0, 0], X[y_kmeans == 0, 1], s=30, c='red', label='Cluster 1')
plt.scatter(X[y_kmeans == 1, 0], X[y_kmeans == 1, 1], s=30, c='green', label='Cluster 2')
plt.scatter(X[y_kmeans == 2, 0], X[y_kmeans == 2, 1], s=30, c='yellow', label='Cluster 3')
plt.scatter(X[y_kmeans == 3, 0], X[y_kmeans == 3, 1], s=30, c='blue', label='Cluster 4')
plt.scatter(X[y_kmeans == 4, 0], X[y_kmeans == 4, 1], s=30, c='orange', label='Cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=100, c='black', label='Centroids')

plt.title('Clusters of Customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()