# -*- coding: utf-8 -*-
"""Heart Disease Prediction using Logistics Regression.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uCukKvbGppBmdIxCVE-FVh4zm_ECtSVS

# **Heart Disease Dataset**

**Public Health Dataset**


## **About Dataset**
###**Context**
This data set dates from 1988 and consists of four databases: Cleveland, Hungary, Switzerland, and Long Beach V. It contains 76 attributes, including the predicted attribute, but all published experiments refer to using a subset of 14 of them. The "target" field refers to the presence of heart disease in the patient. It is integer valued 0 = no disease and 1 = disease.

###**Content**
**Attribute Information:**

1. age
2. sex
3. chest pain type (4 values)
4. resting blood pressure
5. serum cholestoral in mg/dl
6. fasting blood sugar > 120 mg/dl
7. resting electrocardiographic results (values 0,1,2)
8. maximum heart rate achieved
9. exercise induced angina
10. oldpeak = ST depression induced by exercise relative to rest
11. the slope of the peak exercise ST segment
12. number of major vessels (0-3) colored by flourosopy
13. thal: 0 = normal; 1 = fixed defect; 2 = reversable defect

The names and social security numbers of the patients were recently removed from the database, replaced with dummy values.

# **Installing require Tools**
"""

pip install gradio

"""#**Import the Libraries**"""

## import some basic libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import gradio as gr

"""#**Data Collecction and Preprocessing**"""

# Loading the dataset into a pandas DataFrame
heart_data = pd.read_csv('heart.csv')  # Use this to identify issues

# Display the first few rows
print("First 5 rows of the dataset:")
heart_data.head()

# Display the last few rows
print("Last 5 rows of the dataset:")
heart_data.tail()

# Checking the shape of the dataset
heart_data.shape    # Outputs the number of rows and columns in the dataset.

# Statistical description of the dataset
print("\nStatistical Description of the Dataset:")
heart_data.describe()

# Check for missing values
missing_values = heart_data.isnull().sum()
print("\nMissing values in each column:")
print(missing_values)

# Geerating some Information about the dataset
heart_data.info()

# Number of values for Target Variable
heart_data['target'].value_counts()

# Number of values for Sex Variable
heart_data['sex'].value_counts()

# Number of values for Cp Variable
heart_data['cp'].value_counts()

# Number of values for restecg Variable
heart_data['restecg'].value_counts()

"""**Correlation**"""

# Number of values for restecg Variable
heart_data['exang'].value_counts()

# Number of values for slope Variable
heart_data['slope'].value_counts()

# Number of values for ca Variable
heart_data['ca'].value_counts()

# Number of values for thal Variable
heart_data['thal'].value_counts()

corr = heart_data.corr()
print(corr)

# Create the heatmap with enhancements
plt.figure(figsize=(10, 10))
sns.heatmap(
    corr,
    annot=True,
    fmt=".2f",
    cmap="coolwarm",
    cbar_kws={"shrink": 0.8},
    linewidths=0.5,
    square=True,
    annot_kws={"size": 8, "weight": "bold"},
)
plt.title("Enhanced Correlation Heatmap", fontsize=14, fontweight="bold", pad=15)
plt.xticks(fontsize=10, rotation=45, ha="right", weight="bold")
plt.yticks(fontsize=10, weight="bold")
plt.tight_layout()

"""**1 ----> Defective Heart**

**0 ----> Healthy Heart**

# Splitting the features and target Variable
"""

# Splitting features and target
X = heart_data.drop(columns="target", axis=1)
y = heart_data["target"]

print("Features (X):")
print(X.head())
print("\nTarget (y):")
print(y.head())

"""# **Splitting the dataset into Training and Test sets**"""

# Splitting the dataset into Training and Test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, stratify=y,  random_state=3)
print("\nDataset split completed:")
print(f"Total samples: {X.shape[0]}, Training samples: {X_train.shape[0]}, Test samples: {X_test.shape[0]}")

# checking the number of Test and Train dataset
print(X.shape, X_train.shape, X_test.shape)

"""# **Model Training**"""

# Initialize the model
logReg_model = LogisticRegression()

# Training the LogisticRegression model with train data
logReg_model.fit(X_train, y_train)

"""#**Model Evaluation**"""

# Calculate accuracy on the training data
X_train_pred = logReg_model.predict(X_train)
train_data_accuracy = accuracy_score(X_train_pred, y_train)
print('Accuracy on training data : ', train_data_accuracy)

# Generate and display the confusion matrix on the training data
# The confusion matrix shows the counts of True Positives, True Negatives, False Positives, and False Negatives
conf_matrix = confusion_matrix(y_train, X_train_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Generate and display the classification report
# The classification report includes precision, recall, F1-score, and support for each class
class_report = classification_report(y_train, X_train_pred, target_names=["Healthy Heart (0)", "Defective Heart (1)"])
print("\nClassification Report:")
print(class_report)

# accuracy on the test data
X_test_pred = logReg_model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_pred, y_test)
print('Accuracy on test data : ', test_data_accuracy)

# Generate and display the confusion matrix on the test data
# The confusion matrix shows the counts of True Positives, True Negatives, False Positives, and False Negatives
conf_matrix = confusion_matrix(y_test, X_test_pred)
print("\nConfusion Matrix:")
print(conf_matrix)

# Generate and display the classification report
# The classification report includes precision, recall, F1-score, and support for each class
class_report = classification_report(y_test, X_test_pred, target_names=["Healthy Heart (0)", "Defective Heart (1)"])
print("\nClassification Report:")
print(class_report)

"""# **Making a Predictive System**"""

# Sample input data (new instance to classify)
input_data = [58,0,0,100,248,0,0,122,0,1,1,0,2]

# Converting input data to a NumPy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshaping the input array for prediction (to match model's expected input shape)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Making a prediction
prediction = logReg_model.predict(input_data_reshaped)
print(prediction)

# Outputting the result
if prediction[0] == 0:
    print("The Person does not have Heart Disease (i.e. Healthy Heart)")
else:
    print("The Person have Heart Disease (i.e. Defective Heart)")

# Sample input data (new instance to classify)
input_data = [61,1,0,148,203,0,1,161,0,0,2,1,3]

# Converting input data to a NumPy array
input_data_as_numpy_array = np.asarray(input_data)

# Reshaping the input array for prediction (to match model's expected input shape)
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

# Making a prediction
prediction = logReg_model.predict(input_data_reshaped)
print(prediction)

# Outputting the result
if prediction[0] == 0:
    print("The Person does not have Heart Disease (i.e. Healthy Heart)")
else:
    print("The Person have Heart Disease (i.e. Defective Heart)")

def predict_heart_disease(input_data):
    """
    Predicts loan status based on input data using the trained SVM model.

    Parameters:
        input_data (list): A list of values corresponding to the features in the order:
                           [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak,
                           slope, ca, thal]

    Returns:
        str: Prediction result (Loan Approved or Not Approved).
    """
    # Convert input_data to a NumPy array
    input_array = np.array(input_data).reshape(1, -1)

    # Ensure the model and scaler (if used) are applied to the input
    prediction = logReg_model.predict(input_array)

    # Interpret and return the result
    if prediction[0] == 0:
        return "The Person does not have Heart Disease (i.e. Healthy Heart)"
    else:
        return "The Person have Heart Disease (i.e. Defective Heart)"

# Example: Predict for a healthy or defective heart
# Sample data: [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope,
#               ca, thal]
sample_data = [58,0,0,100,248,0,0,122,0,1,1,0,2]


# Call the function to predict
result = predict_heart_disease(sample_data)
print("Prediction Result:", result)

# Example: Predict for a healthy or defective heart
# Sample data: [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope,
#               ca, thal]
sample_data = [61,1,0,148,203,0,1,161,0,0,2,1,3]

# Call the function to predict
result = predict_heart_disease(sample_data)
print("Prediction Result:", result)

def gradio_predict(age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal):
    # Convert inputs to a list
    input_data = [
        float(age), float(sex), float(cp), float(trestbps),
        float(chol), float(fbs), float(restecg), float(thalach), float(exang),
        float(oldpeak), float(slope), float(ca), float(thal)
        ]

    # Call the prediction function (you need to define predict_wine_quality)
    prediction = predict_heart_disease(input_data)  # Ensure predict_wine_quality is defined
    return prediction

# Set up the Gradio interface
interface = gr.Interface(
    fn=gradio_predict,
    inputs=[
        gr.Number(label="Age"),
        gr.Dropdown(["0", "1"], label="Sex"),
        gr.Dropdown(["0", "1", "2", "3"], label="cp"),
        gr.Number(label="trestbps"),
        gr.Number(label="chol"),
        gr.Number(label="fbs"),
        gr.Dropdown(["0", "1", "2"], label="restecg"),
        gr.Number(label="thalach"),
        gr.Dropdown(["0", "1"], label="exang"),
        gr.Number(label="oldpeak"),
        gr.Dropdown(["0", "1", "2"], label="slope"),
        gr.Dropdown(["0", "1", "2", "3", "4"], label="ca"),
        gr.Dropdown(["0", "1", "2", "3"], label="thal"),
    ],
    outputs=gr.Textbox(label="Prediction Result"),
    title="Heart Disease Prediction",
    description="Enter the required details to predict if a heart will be Good or Bad."
)

# Launch the interface
interface.launch()